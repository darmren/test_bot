from aiogram import Bot, Dispatcher
from aiogram.types import User, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import Dialog, DialogManager, StartMode, Window, setup_dialogs
import random
from aiogram_dialog.widgets.media import StaticMedia, DynamicMedia
from aiogram_dialog.api.entities import MediaAttachment, MediaId
from aiogram_dialog.widgets.text import (
    Const,
    Format,
)  # –ó–¥–µ—Å—å –±—É–¥–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã

from aiogram_dialog.widgets.kbd import (
    Button,
    Select,
    Column,
)  # –ó–¥–µ—Å—å –±—É–¥–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã

from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.text import Const
from environs import Env
import logging

logging.basicConfig(level=logging.INFO)

env = Env()
env.read_env()
BOT_TOKEN = env("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


class StartSG(StatesGroup):
    start = State()


class KittenTestSG(StatesGroup):
    start = State()
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    result = State()


async def go_start(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


async def go_kitten_test(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    await dialog_manager.start(state=KittenTestSG.start, mode=StartMode.RESET_STACK)


async def go_next_button(
    callback: CallbackQuery, button: Button, dialog_manager: DialogManager
):
    await dialog_manager.next()


async def go_next_select(
    callback: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str
):
    # print(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å id={item_id}")
    await dialog_manager.next()


async def some_handler(
    callback: CallbackQuery, dialog_manager: DialogManager
):  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—ç–Ω–¥–ª–µ—Ä—ã
    pass


async def some_getter(**kwargs):  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    pass


async def username_getter(
    dialog_manager: DialogManager, event_from_user: User, **kwargs
):
    return {"username": event_from_user.username}


kittens = [
    ("–∫–æ—Ç—ë–Ω–æ–∫-–Ω–µ–≤–¥—É–ø–ª—ë–Ω—ã—à", "/home/drmrn/test_bot/sources/clear_brain_cat.jpg"),
    ("–ø–µ—á–∞–ª—å–Ω—ã–π –∫–æ—Ç–µ–π–∫–∞", "/home/drmrn/test_bot/sources/emo_cat.jpg"),
    ("–∏–≥—Ä–∏–≤—ã–π –∫–æ—Ç–∏–∫", "/home/drmrn/test_bot/sources/playful_cat.jpg"),
    ("–∫–æ—Ç—å-—É–º–Ω—è—à–∫–∞", "/home/drmrn/test_bot/sources/smart_cat.jpg"),
]


async def kitten_getter(dialog_manager: DialogManager, **kwargs):
    kit = random.choice(kittens)
    print(kit)
    return {
        "kitten_text": kit[0],
        "kitten_image": MediaAttachment(type=ContentType.PHOTO, path=kit[1]),
    }


# –≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
start_dialog = Dialog(
    Window(
        Format(
            "–ü—Ä–∏–≤–µ—Ç, {username}, –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ç–µ—Å—Ç?"
        ),  # just a constant text
        Button(
            Const("–ö–∞–∫–æ–π —è –∫–æ—Ç–∏–∫?"), id="kitten_test_button", on_click=go_kitten_test
        ),
        Button(Const("–ö–∞–∫–æ–π —è –ø—ë—Å–∏–∫?"), id="puppy_test_button"),
        Button(Const("–ö–∞–∫–æ–π —è —Ö–æ–º—è–∫?"), id="hamster_test_button"),
        getter=username_getter,
        state=StartSG.start,  # state is used to identify window between dialogs
    )
)

kitten_test_dialog = Dialog(
    Window(
        Const("–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫–æ–π —Ç—ã –∫–æ—Ç–∏–∫. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—Éüëá"),
        DynamicMedia("kitten_image"),
        Button(
            Const("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"), id="kitten_test_start_button", on_click=go_next_button
        ),
        getter=kitten_getter,
        state=KittenTestSG.start,
    ),
    Window(
        Const("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ª—é–±–∏–º—ã–π —Ç–≤–æ—Ä–æ–∂–µ–Ω–Ω—ã–π —Å—ã—Ä–æ–∫?"),
        Column(
            Select(
                Format("{item[0]}"),
                id="glazed_cheese",
                item_id_getter=lambda x: x[1],
                items=[
                    ("–®–æ–∫–æ–ª–∞–¥–Ω—ã–π", 1),
                    ("–í–∞–Ω–∏–ª—å–Ω—ã–π", 2),
                    ("–° –≤–∞—Ä—ë–Ω–Ω–æ–π —Å–≥—É—â—ë–Ω–∫–æ–π", 3),
                    ("–Ø –Ω–µ –ª—é–±–ª—é —Å—ã—Ä–∫–∏ :(", 4),
                ],
                on_click=go_next_select,
            ),
        ),
        state=KittenTestSG.q1,
    ),
    Window(
        Const("–¢–≤–æ—ë –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?"),
        Column(
            Select(
                Format("{item[0]}"),
                id="season",
                item_id_getter=lambda x: x[1],
                items=[
                    ("–ó–∏–º–∞", 1),
                    ("–í–µ—Å–Ω–∞", 2),
                    ("–õ–µ—Ç–æ", 3),
                    ("–û—Å–µ–Ω—å", 4),
                ],
                on_click=go_next_select,
            ),
        ),
        state=KittenTestSG.q2,
    ),
    Window(
        Const("–ê —á—Ç–æ –Ω–∞—Å—á—ë—Ç –∏—Å–∫—É—Å—Å—Ç–≤–∞?"),
        Column(
            Select(
                Format("{item[0]}"),
                id="hobby",
                item_id_getter=lambda x: x[1],
                items=[
                    ("–Ø –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–∏–Ω–æ–º–∞–Ω", 1),
                    ("–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö", 2),
                    ("–ú–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –∫–Ω–∏–∂–Ω—ã–º —á–µ—Ä–≤—ë–º", 3),
                    ("5 –ª–µ—Ç —Ö—É–¥–æ–∂–∫–∏ –≤–∞–º –æ —á—ë–º-–Ω–∏–±—É–¥—å  –≥–æ–≤–æ—Ä—è—Ç?", 4),
                ],
                on_click=go_next_select,
            ),
        ),
        state=KittenTestSG.q3,
    ),
    Window(
        Const("–ê –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä?"),
        Column(
            Select(
                Format("{item[0]}"),
                id="temper",
                item_id_getter=lambda x: x[1],
                items=[
                    ("–Ø –¥–æ–±—Ä–∞—è –ª–∞–ø–æ—á–∫–∞", 1),
                    ("–Ø —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è —à—Ç—É—á–∫–∞", 2),
                    ("–Ø –∑–ª—é–∫–∞, –∞ —á—Ç–æ, –Ω–µ–ª—å–∑—è!?", 3),
                    ("–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ - –º–æ—ë –≤—Ç–æ—Ä–æ–µ –∏–º—è", 4),
                ],
                on_click=go_next_select,
            ),
        ),
        state=KittenTestSG.q4,
    ),
    Window(
        Const("–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–µ—Å—Ç?"),
        Column(
            Select(
                Format("{item[0]}"),
                id="feedback",
                item_id_getter=lambda x: x[1],
                items=[
                    ("–î–∞", 1),
                    ("–ê –∫–∞–∫ –∏–Ω–∞—á–µ?", 2),
                    ("–•–æ—á—É –µ—â–µ —Ç–µ—Å—Ç–æ–≤", 3),
                    ("–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", 4),
                ],
                on_click=go_next_select,
            ),
        ),
        state=KittenTestSG.q5,
    ),
    Window(
        # TODO: –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–æ—á–∫–∞
        Format("–ü–æ–∑–¥—Ä–∞–≤–∞–ª—è—é, —Ç—ã - {kitten_text}!"),
        DynamicMedia("kitten_image"),
        Button(Const("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), id="to_start_menu", on_click=go_start),
        getter=kitten_getter,
        state=KittenTestSG.result,
    ),
)


# –≠—Ç–æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def command_start_process(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(state=StartSG.start, mode=StartMode.RESET_STACK)


dp.include_routers(start_dialog, kitten_test_dialog)
setup_dialogs(dp)

if __name__ == "__main__":

    dp.run_polling(bot)
